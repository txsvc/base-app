# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google-cloud-error_reporting-v1beta1/all/google-cloud-error_reporting-v1beta1.rbi
#
# google-cloud-error_reporting-v1beta1-0.1.2

module Google
end
module Google::Cloud
end
module Google::Cloud::ErrorReporting
end
module Google::Cloud::ErrorReporting::V1beta1
end
module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Credentials < Google::Auth::Credentials
end
module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths
  def error_group_path(project:, group:); end
  extend Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroup
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::TrackingIssue
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorEvent
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ServiceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::HttpRequestContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::SourceLocation
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::GetGroupRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::UpdateGroupRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client
  def configure; end
  def error_group_service_stub; end
  def get_group(request, options = nil); end
  def initialize; end
  def self.configure; end
  def update_group(request, options = nil); end
  include Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration
  def channel_args; end
  def channel_args=(new_value); end
  def credentials; end
  def credentials=(new_value); end
  def endpoint; end
  def endpoint=(new_value); end
  def initialize(parent_config = nil); end
  def interceptors; end
  def interceptors=(new_value); end
  def lib_name; end
  def lib_name=(new_value); end
  def lib_version; end
  def lib_version=(new_value); end
  def metadata; end
  def metadata=(new_value); end
  def quota_project; end
  def quota_project=(new_value); end
  def retry_policy; end
  def retry_policy=(new_value); end
  def rpcs; end
  def scope; end
  def scope=(new_value); end
  def timeout; end
  def timeout=(new_value); end
  extend Gapic::Config
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupService::Client::Configuration::Rpcs
  def get_group; end
  def initialize(parent_rpcs = nil); end
  def update_group; end
end
module Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Credentials < Google::Auth::Credentials
end
module Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths
  def project_path(project:); end
  extend Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ListGroupStatsRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ListGroupStatsResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorGroupStats
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::TimedCount
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ListEventsRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ListEventsResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Cloud::ErrorReporting::V1beta1::QueryTimeRange::Period
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Cloud::ErrorReporting::V1beta1::ServiceContextFilter
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::DeleteEventsRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::DeleteEventsResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Cloud::ErrorReporting::V1beta1::TimedCountAlignment
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
module Google::Cloud::ErrorReporting::V1beta1::ErrorGroupOrder
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client
  def configure; end
  def delete_events(request, options = nil); end
  def error_stats_service_stub; end
  def initialize; end
  def list_events(request, options = nil); end
  def list_group_stats(request, options = nil); end
  def self.configure; end
  include Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration
  def channel_args; end
  def channel_args=(new_value); end
  def credentials; end
  def credentials=(new_value); end
  def endpoint; end
  def endpoint=(new_value); end
  def initialize(parent_config = nil); end
  def interceptors; end
  def interceptors=(new_value); end
  def lib_name; end
  def lib_name=(new_value); end
  def lib_version; end
  def lib_version=(new_value); end
  def metadata; end
  def metadata=(new_value); end
  def quota_project; end
  def quota_project=(new_value); end
  def retry_policy; end
  def retry_policy=(new_value); end
  def rpcs; end
  def scope; end
  def scope=(new_value); end
  def timeout; end
  def timeout=(new_value); end
  extend Gapic::Config
end
class Google::Cloud::ErrorReporting::V1beta1::ErrorStatsService::Client::Configuration::Rpcs
  def delete_events; end
  def initialize(parent_rpcs = nil); end
  def list_events; end
  def list_group_stats; end
end
module Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Credentials < Google::Auth::Credentials
end
module Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths
  def project_path(project:); end
  extend Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorEventResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ReportedErrorEvent
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client
  def configure; end
  def initialize; end
  def report_error_event(request, options = nil); end
  def report_errors_service_stub; end
  def self.configure; end
  include Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Paths
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration
  def channel_args; end
  def channel_args=(new_value); end
  def credentials; end
  def credentials=(new_value); end
  def endpoint; end
  def endpoint=(new_value); end
  def initialize(parent_config = nil); end
  def interceptors; end
  def interceptors=(new_value); end
  def lib_name; end
  def lib_name=(new_value); end
  def lib_version; end
  def lib_version=(new_value); end
  def metadata; end
  def metadata=(new_value); end
  def quota_project; end
  def quota_project=(new_value); end
  def retry_policy; end
  def retry_policy=(new_value); end
  def rpcs; end
  def scope; end
  def scope=(new_value); end
  def timeout; end
  def timeout=(new_value); end
  extend Gapic::Config
end
class Google::Cloud::ErrorReporting::V1beta1::ReportErrorsService::Client::Configuration::Rpcs
  def initialize(parent_rpcs = nil); end
  def report_error_event; end
end
