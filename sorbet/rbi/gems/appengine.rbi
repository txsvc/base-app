# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/appengine/all/appengine.rbi
#
# appengine-0.5.0

module AppEngine
end
module AppEngine::Util
end
module AppEngine::Util::Gcloud
  def self.binary_path!; end
  def self.binary_path; end
  def self.capture(args); end
  def self.current_project!; end
  def self.current_project; end
  def self.execute(args, echo: nil, capture: nil, assert: nil); end
  def self.verify!; end
end
class AppEngine::Util::Gcloud::Error < StandardError
end
class AppEngine::Util::Gcloud::BinaryNotFound < AppEngine::Util::Gcloud::Error
  def initialize; end
end
class AppEngine::Util::Gcloud::ProjectNotSet < AppEngine::Util::Gcloud::Error
  def initialize; end
end
class AppEngine::Util::Gcloud::GcloudNotAuthenticated < AppEngine::Util::Gcloud::Error
  def initialize; end
end
class AppEngine::Util::Gcloud::GcloudFailed < AppEngine::Util::Gcloud::Error
  def initialize(code); end
end
class AppEngine::Exec
  def build_config(command, image, env_variables, cloud_sql_instances); end
  def command; end
  def command=(arg0); end
  def complete_flex_app_yaml(yaml_data, app_info); end
  def complete_standard_app_yaml(yaml_data, app_info); end
  def config_path; end
  def config_path=(arg0); end
  def copy_app_yaml(app_info, entrypoint_file); end
  def copy_entrypoint(secret); end
  def create_secret; end
  def default_project; end
  def delete_temp_version(temp_version); end
  def deploy_temp_app(app_yaml_file); end
  def describe_build_strategy; end
  def describe_deployment_strategy; end
  def initialize(command, project: nil, service: nil, config_path: nil, version: nil, timeout: nil, wrapper_image: nil, strategy: nil); end
  def latest_version(service); end
  def parse_timeout(timeout_str); end
  def project; end
  def project=(arg0); end
  def resolve_parameters; end
  def resolve_strategy(app_env); end
  def self.default_config_path; end
  def self.default_config_path=(arg0); end
  def self.default_service; end
  def self.default_service=(arg0); end
  def self.default_timeout; end
  def self.default_timeout=(arg0); end
  def self.default_wrapper_image; end
  def self.default_wrapper_image=(arg0); end
  def self.new_rake_task(name, args: nil, env_args: nil, service: nil, config_path: nil, version: nil, timeout: nil, project: nil, wrapper_image: nil, strategy: nil); end
  def service; end
  def service=(arg0); end
  def service_from_config; end
  def start; end
  def start_build_strategy(app_info); end
  def start_deployment_strategy(app_info); end
  def strategy; end
  def strategy=(arg0); end
  def timeout; end
  def timeout=(arg0); end
  def track_status(temp_version, secret); end
  def version; end
  def version=(arg0); end
  def version_info(service, version); end
  def wrapper_image; end
  def wrapper_image=(arg0); end
end
class AppEngine::Exec::UsageError < StandardError
end
class AppEngine::Exec::UnsupportedStrategy < AppEngine::Exec::UsageError
  def app_env; end
  def initialize(strategy, app_env); end
  def strategy; end
end
class AppEngine::Exec::BadParameter < AppEngine::Exec::UsageError
  def initialize(param, value); end
  def param_name; end
  def value; end
end
class AppEngine::Exec::NoDefaultProject < AppEngine::Exec::UsageError
  def initialize; end
end
class AppEngine::Exec::ConfigFileNotFound < AppEngine::Exec::UsageError
  def config_path; end
  def initialize(config_path); end
end
class AppEngine::Exec::BadConfigFileFormat < AppEngine::Exec::UsageError
  def config_path; end
  def initialize(config_path); end
end
class AppEngine::Exec::NoSuchVersion < AppEngine::Exec::UsageError
  def initialize(service, version = nil); end
  def service; end
  def version; end
end
class AppEngine::Railtie < Rails::Railtie
end
