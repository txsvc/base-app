# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gapic-common/all/gapic-common.rbi
#
# gapic-common-0.3.4

module Gapic
end
class Gapic::CallOptions
  def apply_defaults(timeout: nil, metadata: nil, retry_policy: nil); end
  def initialize(timeout: nil, metadata: nil, retry_policy: nil); end
  def metadata; end
  def retry_policy; end
  def timeout; end
  def to_h; end
end
class Gapic::CallOptions::RetryPolicy
  def apply_defaults(retry_policy); end
  def call(error); end
  def convert_codes(input_codes); end
  def delay!; end
  def delay; end
  def increment_delay!; end
  def initial_delay; end
  def initialize(retry_codes: nil, initial_delay: nil, multiplier: nil, max_delay: nil); end
  def max_delay; end
  def multiplier; end
  def retry?(error); end
  def retry_codes; end
end
class Gapic::Operation
  def cancel(options: nil); end
  def delete(options: nil); end
  def done?; end
  def error; end
  def error?; end
  def grpc_op; end
  def initialize(grpc_op, client, result_type: nil, metadata_type: nil, options: nil); end
  def metadata; end
  def name; end
  def on_done(&block); end
  def refresh!(options: nil); end
  def reload!(options: nil); end
  def response; end
  def response?; end
  def results; end
  def wait_until_done!(retry_policy: nil); end
end
class Gapic::Operation::RetryPolicy
  def call; end
  def deadline; end
  def delay!; end
  def delay; end
  def increment_delay!; end
  def initial_delay; end
  def initialize(initial_delay: nil, multiplier: nil, max_delay: nil, timeout: nil); end
  def max_delay; end
  def multiplier; end
  def retry?; end
  def timeout; end
end
module Gapic::Common
end
module Gapic::Headers
  def self.x_goog_api_client(ruby_version: nil, lib_name: nil, lib_version: nil, gax_version: nil, gapic_version: nil, grpc_version: nil); end
end
class Gapic::PagedEnumerable
  def each; end
  def each_page; end
  def initialize(grpc_stub, method_name, request, response, operation, options, format_resource: nil); end
  def next_page!; end
  def next_page; end
  def next_page?; end
  def next_page_token; end
  def page; end
  def response; end
  def verify_request!; end
  def verify_response!; end
  include Enumerable
end
class Gapic::PagedEnumerable::Page
  def each; end
  def initialize(response, resource_field, operation, format_resource: nil); end
  def next_page_token; end
  def next_page_token?; end
  def operation; end
  def response; end
  include Enumerable
end
module Gapic::Protobuf
  def self.coerce(hash, to:); end
  def self.coerce_array(array, field_descriptor); end
  def self.coerce_submessage(val, field_descriptor); end
  def self.coerce_submessages(hash, message_class); end
  def self.coerce_value(val, field_descriptor); end
  def self.map_field?(field_descriptor); end
  def self.time_to_timestamp(time); end
  def self.timestamp_to_time(timestamp); end
end
class Gapic::StreamInput
  def <<(request); end
  def append(request); end
  def close; end
  def initialize(*requests); end
  def push(request); end
  def to_enum; end
end
module Gapic::Config
  def config_attr(name, default, *valid_values, &validator); end
  def create_getter(name_ivar, name, default); end
  def create_setter(name_ivar, name_setter, default, validator); end
end
class Gapic::Config::Method
  def initialize(parent_method = nil); end
  def metadata; end
  def metadata=(new_value); end
  def retry_policy; end
  def retry_policy=(new_value); end
  def timeout; end
  def timeout=(new_value); end
  extend Gapic::Config
end
