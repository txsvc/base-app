# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google-gax/all/google-gax.rbi
#
# google-gax-1.8.1

module Google
end
module Google::Gax
  def add_timeout_arg(a_func, timeout, metadata); end
  def bundleable(desc); end
  def calc_method_timeout(timeout, method_config, overriding_method); end
  def coerce(val, field_descriptor); end
  def coerce_array(array, field_descriptor); end
  def coerce_submessage(val, field_descriptor); end
  def coerce_submessages(hash, message_class); end
  def compute_bundle_id(obj, discriminator_fields); end
  def construct_bundling(bundle_config, bundle_descriptor); end
  def construct_retry(method_config, retry_codes, retry_params, retry_names); end
  def construct_settings(service_name, client_config, config_overrides, retry_names, timeout, bundle_descriptors: nil, page_descriptors: nil, metadata: nil, kwargs: nil, errors: nil); end
  def create_api_call(func, settings, params_extractor: nil, exception_transformer: nil); end
  def from_error(error); end
  def map_field?(field_descriptor); end
  def merge_retry_options(retry_options, overrides); end
  def page_streamable(request_page_token_field, response_page_token_field, resource_field); end
  def retryable(a_func, retry_options, metadata); end
  def self.add_timeout_arg(a_func, timeout, metadata); end
  def self.bundleable(desc); end
  def self.calc_method_timeout(timeout, method_config, overriding_method); end
  def self.coerce(val, field_descriptor); end
  def self.coerce_array(array, field_descriptor); end
  def self.coerce_submessage(val, field_descriptor); end
  def self.coerce_submessages(hash, message_class); end
  def self.compute_bundle_id(obj, discriminator_fields); end
  def self.construct_bundling(bundle_config, bundle_descriptor); end
  def self.construct_retry(method_config, retry_codes, retry_params, retry_names); end
  def self.construct_settings(service_name, client_config, config_overrides, retry_names, timeout, bundle_descriptors: nil, page_descriptors: nil, metadata: nil, kwargs: nil, errors: nil); end
  def self.create_api_call(func, settings, params_extractor: nil, exception_transformer: nil); end
  def self.from_error(error); end
  def self.grpc_error_class_for(grpc_error_code); end
  def self.map_field?(field_descriptor); end
  def self.merge_retry_options(retry_options, overrides); end
  def self.page_streamable(request_page_token_field, response_page_token_field, resource_field); end
  def self.retryable(a_func, retry_options, metadata); end
  def self.str_dotted_access(obj, name); end
  def self.time_to_timestamp(time); end
  def self.timestamp_to_time(timestamp); end
  def self.to_proto(hash, message_class); end
  def self.upper_camel_to_lower_underscore(s); end
  def self.with_routing_header(settings, params); end
  def str_dotted_access(obj, name); end
  def time_to_timestamp(time); end
  def timestamp_to_time(timestamp); end
  def to_proto(hash, message_class); end
  def upper_camel_to_lower_underscore(s); end
  def with_routing_header(settings, params); end
end
module Google::Gax::Grpc
  def create_stub(service_path, port, channel: nil, chan_creds: nil, updater_proc: nil, scopes: nil, interceptors: nil); end
  def deserialize_error_status_details(error); end
  def self.class_case(modules); end
  def self.create_stub(service_path, port, channel: nil, chan_creds: nil, updater_proc: nil, scopes: nil, interceptors: nil); end
  def self.deserialize_error_status_details(error); end
  def self.verify_params(channel, chan_creds, updater_proc); end
end
class Google::Gax::GaxError < StandardError
  def cause; end
  def code; end
  def details; end
  def initialize(msg); end
  def metadata; end
  def status_details; end
end
class Google::Gax::RetryError < Google::Gax::GaxError
end
class Google::Gax::CanceledError < Google::Gax::GaxError
end
class Google::Gax::UnknownError < Google::Gax::GaxError
end
class Google::Gax::InvalidArgumentError < Google::Gax::GaxError
end
class Google::Gax::DeadlineExceededError < Google::Gax::GaxError
end
class Google::Gax::NotFoundError < Google::Gax::GaxError
end
class Google::Gax::AlreadyExistsError < Google::Gax::GaxError
end
class Google::Gax::PermissionDeniedError < Google::Gax::GaxError
end
class Google::Gax::ResourceExhaustedError < Google::Gax::GaxError
end
class Google::Gax::FailedPreconditionError < Google::Gax::GaxError
end
class Google::Gax::AbortedError < Google::Gax::GaxError
end
class Google::Gax::OutOfRangeError < Google::Gax::GaxError
end
class Google::Gax::UnimplementedError < Google::Gax::GaxError
end
class Google::Gax::InternalError < Google::Gax::GaxError
end
class Google::Gax::UnavailableError < Google::Gax::GaxError
end
class Google::Gax::DataLossError < Google::Gax::GaxError
end
class Google::Gax::UnauthenticatedError < Google::Gax::GaxError
end
class Google::Gax::Task
  def bundle_id; end
  def bundled_field; end
  def canceller_for(elts, event); end
  def element_count; end
  def event_for(elts); end
  def extend(elts); end
  def initialize(api_call, bundle_id, bundled_field, bundling_request, subresponse_field: nil); end
  def request_bytesize; end
  def run; end
  def run_with_no_subresponse(request); end
  def run_with_subresponses(request); end
  def subresponse_field; end
end
class Google::Gax::Executor
  def bundle_for(api_call, bundle_id, bundle_desc, bundling_request); end
  def close; end
  def initialize(options, timer: nil); end
  def run_later(bundle_id, delay_threshold_millis); end
  def run_now(bundle_id); end
  def schedule(api_call, bundle_id, bundle_desc, bundling_request); end
end
class Google::Gax::Event
  def cancel; end
  def canceller; end
  def canceller=(arg0); end
  def initialize; end
  def result; end
  def result=(obj); end
  def set?; end
  def wait(timeout_millis: nil); end
end
class Google::Gax::Timer
  def run_after(delay_threshold); end
end
class Google::Gax::PagedEnumerable
  def each; end
  def each_page; end
  def initialize(request_page_token_field, response_page_token_field, resource_field); end
  def next_page; end
  def next_page?; end
  def page; end
  def page_token; end
  def response; end
  def start(api_call, request, settings, block); end
  def started?; end
  include Enumerable
end
class Google::Gax::PagedEnumerable::Page
  def dup_with(response); end
  def each; end
  def initialize(response, response_page_token_field, resource_field); end
  def next_page_token; end
  def next_page_token?; end
  def response; end
  include Enumerable
end
class Google::Gax::PathLex < Rly::Lex
end
class Google::Gax::PathParse < Rly::Yacc
  def binding_var_count; end
  def initialize(*args); end
  def parse(*args); end
  def segment_count; end
end
class Google::Gax::PathTemplate
  def initialize(data); end
  def match(path); end
  def render(**bindings); end
  def segments; end
  def self.format_segments(*segments); end
  def size; end
  def to_s; end
end
class Google::Gax::Segment < Struct
  def kind; end
  def kind=(_); end
  def literal; end
  def literal=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Google::Gax::CallSettings
  def bundle_descriptor; end
  def bundler; end
  def bundler?; end
  def errors; end
  def initialize(timeout: nil, retry_options: nil, page_descriptor: nil, page_token: nil, bundler: nil, bundle_descriptor: nil, metadata: nil, kwargs: nil, errors: nil); end
  def merge(options); end
  def metadata; end
  def page_descriptor; end
  def page_token; end
  def retry_codes?; end
  def retry_options; end
  def timeout; end
end
class Google::Gax::CallOptions
  def initialize(timeout: nil, retry_options: nil, page_token: nil, metadata: nil, kwargs: nil); end
  def kwargs; end
  def metadata; end
  def page_token; end
  def retry_options; end
  def timeout; end
end
class Anonymous_Struct_75 < Struct
  def request_page_token_field; end
  def request_page_token_field=(_); end
  def resource_field; end
  def resource_field=(_); end
  def response_page_token_field; end
  def response_page_token_field=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Google::Gax::PageDescriptor < Anonymous_Struct_75
end
class Anonymous_Struct_76 < Struct
  def backoff_settings; end
  def backoff_settings=(_); end
  def retry_codes; end
  def retry_codes=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Google::Gax::RetryOptions < Anonymous_Struct_76
end
class Anonymous_Struct_77 < Struct
  def initial_retry_delay_millis; end
  def initial_retry_delay_millis=(_); end
  def initial_rpc_timeout_millis; end
  def initial_rpc_timeout_millis=(_); end
  def max_retry_delay_millis; end
  def max_retry_delay_millis=(_); end
  def max_rpc_timeout_millis; end
  def max_rpc_timeout_millis=(_); end
  def retry_delay_multiplier; end
  def retry_delay_multiplier=(_); end
  def rpc_timeout_multiplier; end
  def rpc_timeout_multiplier=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def total_timeout_millis; end
  def total_timeout_millis=(_); end
end
class Google::Gax::BackoffSettings < Anonymous_Struct_77
end
class Anonymous_Struct_78 < Struct
  def bundled_field; end
  def bundled_field=(_); end
  def request_discriminator_fields; end
  def request_discriminator_fields=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def subresponse_field; end
  def subresponse_field=(_); end
end
class Google::Gax::BundleDescriptor < Anonymous_Struct_78
  def initialize(bundled_field, request_discriminator_fields, subresponse_field: nil); end
end
class Anonymous_Struct_79 < Struct
  def delay_threshold_millis; end
  def delay_threshold_millis=(_); end
  def element_count_limit; end
  def element_count_limit=(_); end
  def element_count_threshold; end
  def element_count_threshold=(_); end
  def request_byte_limit; end
  def request_byte_limit=(_); end
  def request_byte_threshold; end
  def request_byte_threshold=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Google::Gax::BundleOptions < Anonymous_Struct_79
  def initialize(element_count_threshold: nil, element_count_limit: nil, request_byte_threshold: nil, request_byte_limit: nil, delay_threshold_millis: nil); end
end
