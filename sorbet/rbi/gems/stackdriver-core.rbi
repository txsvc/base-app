# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/stackdriver-core/all/stackdriver-core.rbi
#
# stackdriver-core-1.4.0

module Stackdriver
end
module Stackdriver::Core
end
module Stackdriver::Core::AsyncActor
  def async_resume; end
  def async_run_job; end
  def async_running?; end
  def async_start; end
  def async_state; end
  def async_state_change; end
  def async_stop!; end
  def async_stop; end
  def async_stopped?; end
  def async_stopping?; end
  def async_suspend; end
  def async_suspended?; end
  def async_working?; end
  def backgrounder_stoppable?; end
  def ensure_thread; end
  def initialize; end
  def on_async_state_change; end
  def run_backgrounder; end
  def self.register_for_cleanup(actor); end
  def self.run_cleanup; end
  def self.unregister_for_cleanup(actor); end
  def set_cleanup_options(**kwargs); end
  def wait_until_async_stopped(timeout = nil); end
  include MonitorMixin
end
class Stackdriver::Core::TraceContext
  def ==(other); end
  def capture_stack?; end
  def eql?(other); end
  def hash; end
  def initialize(trace_id: nil, is_new: nil, span_id: nil, sampled: nil, capture_stack: nil); end
  def new?; end
  def new_random_trace_id; end
  def sampled?; end
  def self.get; end
  def self.parse_rack_env(env); end
  def self.parse_string(str); end
  def self.set(trace_context); end
  def span_id; end
  def to_s; end
  def to_string; end
  def trace_id; end
  def with(trace_id: nil, is_new: nil, span_id: nil, sampled: nil, capture_stack: nil); end
end
