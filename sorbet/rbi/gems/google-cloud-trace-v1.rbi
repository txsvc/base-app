# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google-cloud-trace-v1/all/google-cloud-trace-v1.rbi
#
# google-cloud-trace-v1-0.1.2

module Google
end
module Google::Cloud
end
module Google::Cloud::Trace
end
module Google::Cloud::Trace::V1
end
module Google::Cloud::Trace::V1::TraceService
end
class Google::Cloud::Trace::V1::TraceService::Credentials < Google::Auth::Credentials
end
class Google::Cloud::Trace::V1::Trace
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Trace::V1::Traces
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Trace::V1::TraceSpan
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Cloud::Trace::V1::TraceSpan::SpanKind
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Cloud::Trace::V1::ListTracesRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Cloud::Trace::V1::ListTracesRequest::ViewType
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Cloud::Trace::V1::ListTracesResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Trace::V1::GetTraceRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Trace::V1::PatchTracesRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Trace::V1::TraceService::Client
  def configure; end
  def get_trace(request, options = nil); end
  def initialize; end
  def list_traces(request, options = nil); end
  def patch_traces(request, options = nil); end
  def self.configure; end
  def trace_service_stub; end
end
class Google::Cloud::Trace::V1::TraceService::Client::Configuration
  def channel_args; end
  def channel_args=(new_value); end
  def credentials; end
  def credentials=(new_value); end
  def endpoint; end
  def endpoint=(new_value); end
  def initialize(parent_config = nil); end
  def interceptors; end
  def interceptors=(new_value); end
  def lib_name; end
  def lib_name=(new_value); end
  def lib_version; end
  def lib_version=(new_value); end
  def metadata; end
  def metadata=(new_value); end
  def quota_project; end
  def quota_project=(new_value); end
  def retry_policy; end
  def retry_policy=(new_value); end
  def rpcs; end
  def scope; end
  def scope=(new_value); end
  def timeout; end
  def timeout=(new_value); end
  extend Gapic::Config
end
class Google::Cloud::Trace::V1::TraceService::Client::Configuration::Rpcs
  def get_trace; end
  def initialize(parent_rpcs = nil); end
  def list_traces; end
  def patch_traces; end
end
