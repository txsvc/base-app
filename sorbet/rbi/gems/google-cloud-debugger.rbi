# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google-cloud-debugger/all/google-cloud-debugger.rbi
#
# google-cloud-debugger-0.36.3

module Google
end
module Google::Cloud
  def debugger(service_name: nil, service_version: nil, scope: nil, timeout: nil, client_config: nil); end
  def self.debugger(project_id = nil, credentials = nil, service_name: nil, service_version: nil, scope: nil, timeout: nil, client_config: nil); end
end
module Google::Cloud::Debugger
  def self.allow_mutating_methods!(&block); end
  def self.configure; end
  def self.default_credentials(scope: nil); end
  def self.default_project_id; end
  def self.default_service_name; end
  def self.default_service_version; end
  def self.new(project_id: nil, credentials: nil, service_name: nil, service_version: nil, scope: nil, timeout: nil, client_config: nil, endpoint: nil, project: nil, keyfile: nil); end
end
class Google::Cloud::Debugger::Breakpoint
  def action; end
  def action=(arg0); end
  def app_root; end
  def app_root=(arg0); end
  def check_condition(binding); end
  def complete; end
  def complete?; end
  def condition; end
  def condition=(arg0); end
  def create_time; end
  def create_time=(arg0); end
  def eql?(other); end
  def evaluated_expressions; end
  def evaluated_expressions=(arg0); end
  def evaluated_expressions_to_grpc; end
  def evaluated_log_message; end
  def evaluated_log_message=(arg0); end
  def expressions; end
  def expressions=(arg0); end
  def final_time; end
  def final_time=(arg0); end
  def full_path; end
  def hash; end
  def id; end
  def id=(arg0); end
  def initialize(id = nil, path = nil, line = nil); end
  def is_final_state; end
  def is_final_state=(arg0); end
  def labels; end
  def labels=(arg0); end
  def labels_to_grpc; end
  def line; end
  def location; end
  def location=(arg0); end
  def log_level; end
  def log_level=(arg0); end
  def log_message_format; end
  def log_message_format=(arg0); end
  def path; end
  def self.assign_complex_grpc_fields(grpc, breakpoint); end
  def self.from_grpc(grpc); end
  def self.hashify_labels(grpc_labels); end
  def self.stack_frames_from_grpc(grpc); end
  def self.timestamp_from_grpc(grpc_timestamp); end
  def set_error_state(message, refers_to: nil, is_final: nil); end
  def stack_frames; end
  def stack_frames=(arg0); end
  def stack_frames_to_grpc; end
  def status; end
  def status=(arg0); end
  def status_to_grpc; end
  def timestamp_to_grpc(time); end
  def to_grpc; end
  def user_email; end
  def user_email=(arg0); end
  def valid?; end
  def variable_table; end
  def variable_table=(arg0); end
  include MonitorMixin
end
class Google::Cloud::Debugger::Breakpoint::SourceLocation
  def empty?; end
  def initialize; end
  def line; end
  def line=(arg0); end
  def path; end
  def path=(arg0); end
  def self.from_grpc(grpc); end
  def to_grpc; end
end
class Google::Cloud::Debugger::Breakpoint::StackFrame
  def arguments; end
  def arguments=(arg0); end
  def arguments_to_grpc; end
  def empty?; end
  def function; end
  def function=(arg0); end
  def initialize; end
  def locals; end
  def locals=(arg0); end
  def locals_to_grpc; end
  def location; end
  def location=(arg0); end
  def self.from_grpc(grpc); end
  def to_grpc; end
end
class Google::Cloud::Debugger::Breakpoint::StatusMessage
  def description; end
  def description=(arg0); end
  def empty?; end
  def initialize; end
  def is_error; end
  def is_error=(arg0); end
  def refers_to; end
  def refers_to=(arg0); end
  def self.from_grpc(grpc); end
  def to_grpc; end
end
class Google::Cloud::Debugger::Breakpoint::Variable
  def buffer_full_variable?; end
  def empty?; end
  def initialize; end
  def members; end
  def members=(arg0); end
  def members_to_grpc; end
  def name; end
  def name=(arg0); end
  def payload_size; end
  def reference_variable?; end
  def self.add_compound_members(var, source, depth, var_table = nil, limit: nil); end
  def self.add_member_vars(var, members, limit: nil); end
  def self.add_shared_compound_var(source, depth, var_table, limit: nil); end
  def self.buffer_full_variable(var_table = nil, name: nil); end
  def self.compound_var?(source); end
  def self.deduct_limit(limit, used); end
  def self.from_compound_var(source, name: nil, depth: nil, var_table: nil, limit: nil); end
  def self.from_grpc(grpc); end
  def self.from_grpc_list(grpc_list); end
  def self.from_primitive_var(source, name: nil, limit: nil); end
  def self.from_rb_var(source, name: nil, depth: nil, var_table: nil, limit: nil); end
  def self.truncate_value(str, limit = nil); end
  def self.var_table_index_from_grpc(grpc); end
  def set_error_state(message, refers_to: nil); end
  def source_var; end
  def source_var=(arg0); end
  def status; end
  def status=(arg0); end
  def status_to_grpc; end
  def to_grpc; end
  def total_size; end
  def type; end
  def type=(arg0); end
  def unique_members; end
  def value; end
  def value=(arg0); end
  def var_table; end
  def var_table=(arg0); end
  def var_table_index; end
  def var_table_index=(arg0); end
  def var_table_index_to_grpc; end
end
class Google::Cloud::Debugger::Breakpoint::Evaluator
  def allow_mutating_methods!; end
  def disable_method_trace_for_thread; end
  def enable_method_trace_for_thread; end
  def immutable_yarv_instructions?(yarv_instructions, allow_localops: nil); end
  def initialize(allow_mutating_methods: nil, time_limit: nil); end
  def readonly_eval_expression(binding, expression); end
  def readonly_eval_expression_exec(binding, expression); end
  def self.current; end
  def self.disable_method_trace_for_thread; end
  def self.enable_method_trace_for_thread; end
  def self.hashify(ary); end
  def self.readonly_eval_expression(binding, expression); end
  def trace_c_func_callback(receiver, defined_class, mid); end
  def trace_func_callback(receiver, defined_class, mid); end
  def validate_c_class_method(klass, receiver, mid); end
  def validate_c_instance_method(klass, mid); end
  def validate_compiled_expression(expression); end
  def whitelisted_ruby_class_method?(klass, receiver, mid); end
  def whitelisted_ruby_instance_method?(klass, mid); end
  def wrap_expression(expression); end
end
class Google::Cloud::Debugger::EvaluationError < Exception
  def initialize(msg = nil, mutation_cause = nil); end
  def inspect; end
  def mutation_cause; end
end
class Google::Cloud::Debugger::MutationError < Google::Cloud::Debugger::EvaluationError
  def initialize(msg = nil, *args); end
end
module Google::Cloud::Debugger::Breakpoint::Validator
  def self.validate(breakpoint); end
  def self.verify_file_path(file_path); end
  def self.verify_file_type(file_path); end
  def self.verify_line(file_path, line); end
end
class Google::Cloud::Debugger::Breakpoint::VariableTable
  def [](*args, &block); end
  def add(var); end
  def first(*args, &block); end
  def initialize; end
  def rb_var_index(rb_var); end
  def self.from_grpc(grpc_table); end
  def size(*args, &block); end
  def to_grpc; end
  def variables; end
  def variables=(arg0); end
  extend Forwardable
end
class Google::Cloud::Debugger::Snappoint < Google::Cloud::Debugger::Breakpoint
  def calculate_total_size; end
  def convert_variable(source, name: nil, limit: nil); end
  def eval_call_stack(call_stack_bindings); end
  def eval_expressions(bind); end
  def evaluate(call_stack_bindings); end
  def init_var_table; end
  def initialize(*args); end
end
class Google::Cloud::Debugger::Logpoint < Google::Cloud::Debugger::Breakpoint
  def evaluate(call_stack_bindings); end
  def evaluate_log_message(binding); end
  def format_message(message_format, expressions); end
end
class Google::Cloud::Debugger::BreakpointManager
  def active_breakpoints; end
  def agent; end
  def all_complete?; end
  def app_root; end
  def breakpoint_hit(breakpoint, call_stack_bindings); end
  def breakpoints; end
  def clear_breakpoints; end
  def completed_breakpoints; end
  def convert_grpc_breakpoints(grpc_breakpoints); end
  def filter_breakpoints(breakpoints); end
  def initialize(agent, service); end
  def log_logpoint(logpoint); end
  def mark_off(breakpoint); end
  def on_breakpoints_change; end
  def on_breakpoints_change=(arg0); end
  def service; end
  def sync_active_breakpoints(debuggee_id); end
  def update_breakpoints(server_breakpoints); end
  def wait_token; end
  include MonitorMixin
end
class Google::Cloud::Debugger::Backoff
  def backing_off?; end
  def failed; end
  def initialize(start_interval = nil, max_interval = nil, multiplier = nil); end
  def interval; end
  def succeeded; end
end
class Google::Cloud::Debugger::Debuggee
  def agent_version; end
  def compute_uniquifier(partial_debuggee); end
  def description; end
  def ext_source_context_grpc(source_context); end
  def id; end
  def initialize(service, service_name:, service_version:); end
  def labels; end
  def project_id; end
  def project_id_for_request_arg; end
  def read_app_json_file(file_path); end
  def register; end
  def registered?; end
  def revoke_registration; end
  def service; end
  def service_name; end
  def service_version; end
  def source_context_from_json_file(file_path); end
  def to_grpc; end
end
module Google::Cloud::Debugger::Debuggee::AppUniquifierGenerator
  def self.generate_app_uniquifier(sha, app_path = nil); end
  def self.process_directory(sha, path, depth = nil); end
end
class Google::Cloud::Debugger::Tracer
  def agent; end
  def breakpoints_cache; end
  def breakpoints_hit(breakpoints, call_stack_bindings); end
  def disable_traces; end
  def disable_traces_for_thread; end
  def enable_traces; end
  def fiber_tracepoint; end
  def file_tracepoint; end
  def initialize(agent); end
  def start; end
  def stop; end
  def update_breakpoints_cache; end
end
class Google::Cloud::Debugger::TransmitterError < Google::Cloud::Error
  def breakpoint; end
  def initialize(message, breakpoint = nil); end
end
class Google::Cloud::Debugger::Transmitter
  def agent; end
  def agent=(arg0); end
  def default_error_callbacks; end
  def error!(error); end
  def initialize(agent, service, max_queue: nil, threads: nil); end
  def max_queue; end
  def max_queue=(arg0); end
  def max_queue_size; end
  def max_queue_size=(arg0); end
  def on_error(&block); end
  def service; end
  def start; end
  def started?; end
  def stop(timeout = nil); end
  def stopped?; end
  def submit(breakpoint); end
  def submit_sync(breakpoint); end
  def thread_pool; end
  def threads; end
  def threads=(arg0); end
end
class Google::Cloud::Debugger::Agent
  def app_root; end
  def app_root=(arg0); end
  def breakpoint_manager; end
  def breakpoints_change_callback(active_breakpoints); end
  def debuggee; end
  def default_logger; end
  def ensure_debuggee_registration; end
  def init_app_root(app_root = nil); end
  def initialize(service, service_name:, service_version:, logger: nil, app_root: nil); end
  def last_exception; end
  def logger; end
  def logger=(arg0); end
  def on_async_state_change; end
  def quota_manager; end
  def quota_manager=(arg0); end
  def run_backgrounder; end
  def service; end
  def start; end
  def stop; end
  def stop_tracer; end
  def tracer; end
  def transmitter; end
  include Stackdriver::Core::AsyncActor
end
module Google::Cloud::Debugger::V2
end
class Google::Cloud::Debugger::V2::Credentials < Google::Auth::Credentials
end
class Google::Cloud::Debugger::Credentials < Google::Cloud::Debugger::V2::Credentials
end
class Google::Cloud::Debugger::RequestQuotaManager
  def consume(time: nil); end
  def count_quota; end
  def count_quota=(arg0); end
  def count_used; end
  def count_used=(arg0); end
  def initialize(time_quota: nil, count_quota: nil); end
  def more?; end
  def reset; end
  def time_quota; end
  def time_quota=(arg0); end
  def time_used; end
  def time_used=(arg0); end
end
class Google::Cloud::Debugger::Middleware
  def call(env); end
  def configuration; end
  def init_default_config; end
  def initialize(app, debugger: nil, **kwargs); end
  def load_config(**kwargs); end
  def self.deferred_start(debugger); end
  def self.reset_deferred_start; end
  def self.start_agents; end
end
module Google::Devtools
end
module Google::Devtools::Source
end
module Google::Devtools::Source::V1
end
class Google::Devtools::Source::V1::SourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::ExtendedSourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::AliasContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Devtools::Source::V1::AliasContext::Kind
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Devtools::Source::V1::CloudRepoSourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::CloudWorkspaceSourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::GerritSourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::GitSourceContext
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::RepoId
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::ProjectRepoId
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Source::V1::CloudWorkspaceId
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Devtools::Clouddebugger
end
module Google::Devtools::Clouddebugger::V2
end
class Google::Devtools::Clouddebugger::V2::FormatMessage
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::StatusMessage
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Devtools::Clouddebugger::V2::StatusMessage::Reference
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Devtools::Clouddebugger::V2::SourceLocation
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::Variable
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::StackFrame
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::Breakpoint
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
module Google::Devtools::Clouddebugger::V2::Breakpoint::Action
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
module Google::Devtools::Clouddebugger::V2::Breakpoint::LogLevel
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class Google::Devtools::Clouddebugger::V2::Debuggee
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::SetBreakpointRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::SetBreakpointResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::GetBreakpointRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::GetBreakpointResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::DeleteBreakpointRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListBreakpointsRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListBreakpointsRequest::BreakpointActionValue
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListBreakpointsResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListDebuggeesRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListDebuggeesResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Debugger::V2::Debugger2Client
  def debugger2_stub; end
  def delete_breakpoint(debuggee_id, breakpoint_id, client_version, options: nil, &block); end
  def get_breakpoint(debuggee_id, breakpoint_id, client_version, options: nil, &block); end
  def initialize(credentials: nil, scopes: nil, client_config: nil, timeout: nil, metadata: nil, service_address: nil, service_port: nil, exception_transformer: nil, lib_name: nil, lib_version: nil); end
  def list_breakpoints(debuggee_id, client_version, include_all_users: nil, include_inactive: nil, action: nil, strip_results: nil, wait_token: nil, options: nil, &block); end
  def list_debuggees(project, client_version, include_inactive: nil, options: nil, &block); end
  def set_breakpoint(debuggee_id, breakpoint, client_version, options: nil, &block); end
end
class Google::Devtools::Clouddebugger::V2::RegisterDebuggeeRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::RegisterDebuggeeResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListActiveBreakpointsRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::ListActiveBreakpointsResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::UpdateActiveBreakpointRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Devtools::Clouddebugger::V2::UpdateActiveBreakpointResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_s; end
end
class Google::Cloud::Debugger::V2::Controller2Client
  def controller2_stub; end
  def initialize(credentials: nil, scopes: nil, client_config: nil, timeout: nil, metadata: nil, service_address: nil, service_port: nil, exception_transformer: nil, lib_name: nil, lib_version: nil); end
  def list_active_breakpoints(debuggee_id, wait_token: nil, success_on_timeout: nil, options: nil, &block); end
  def register_debuggee(debuggee, options: nil, &block); end
  def update_active_breakpoint(debuggee_id, breakpoint, options: nil, &block); end
end
module Google::Cloud::Debugger::V2::Debugger2
  def self.new(credentials: nil, scopes: nil, client_config: nil, timeout: nil, metadata: nil, service_address: nil, service_port: nil, exception_transformer: nil, lib_name: nil, lib_version: nil); end
end
module Google::Cloud::Debugger::V2::Controller2
  def self.new(credentials: nil, scopes: nil, client_config: nil, timeout: nil, metadata: nil, service_address: nil, service_port: nil, exception_transformer: nil, lib_name: nil, lib_version: nil); end
end
class Google::Cloud::Debugger::Service
  def client_config; end
  def client_config=(arg0); end
  def cloud_debugger; end
  def credentials; end
  def credentials=(arg0); end
  def default_headers; end
  def default_options; end
  def execute; end
  def host; end
  def host=(arg0); end
  def initialize(project, credentials, timeout: nil, client_config: nil, host: nil); end
  def inspect; end
  def list_active_breakpoints(debuggee_id, wait_token); end
  def mocked_debugger; end
  def mocked_debugger=(arg0); end
  def mocked_transmitter; end
  def mocked_transmitter=(arg0); end
  def project; end
  def project=(arg0); end
  def register_debuggee(debuggee_grpc); end
  def service_address; end
  def service_port; end
  def timeout; end
  def timeout=(arg0); end
  def transmitter; end
  def update_active_breakpoint(debuggee_id, breakpoint); end
end
class Google::Cloud::Debugger::Project
  def agent; end
  def attach; end
  def initialize(service, service_name:, service_version:); end
  def project; end
  def project_id; end
  def service; end
  def service=(arg0); end
  def start; end
  def stop; end
end
class Google::Cloud::Debugger::Railtie < Rails::Railtie
  def self.consolidate_rails_config(config); end
  def self.init_default_config; end
  def self.init_middleware(app); end
  def self.merge_rails_config(rails_config); end
  def self.start_agents; end
  def self.valid_credentials?(project_id, credentials); end
end
